我们课题的一个创新点是以程序而非用户作为访问控制策略的主体。
Windows系统往往账户数量很少，但是以程序为主体之后，我们可以灵活地设置程序的策略，从而发挥上述安全模型的作用。
首先，我们将同一个程序的可执行文件归为程序组。
比如QQ中就有主进程、更新进程、以及其他一些辅助进程。我们就将其归为QQ这样一个程序组。程序组可以在每次安装的时候自动归纳得出。
(pass)
一些程序组拥有相似功能，其行为也是相似的，我们将这些程序组的归为程序角色。
比如IE和Chrome、Firefox作为同样的网络浏览器，其访问网络的行为也是相似的。用户可以对于同一组别设置相同的规则和组别，从而大大简化配置工作。
(pass)
从而，一个主体进程，具有以下性质：程序角色、访问记录、执行用户的权限以及其他全系统策略等。根据这些策略，访问控制引擎得以制定访问控制策略。
我们课题的另一个创新点是将主体过去访问历史作为访问控制在策略的参考对象，智能化地生成访问控制规则。
(pass)
我们这么做的原因主要有以下几点。
首先，利用主体访问历史可以有效地解决主体访问时的冲突。
在本系统中，主体并非用户而是进程。原有的BLP等安全模型，为用户而设计，对于程序来说比较死板。
而与此同时，Windows作为闭源操作系统，许多应用程序无法了解其内在调用机制。这增加了冲突的可能性。
考虑到系统的实用性，我们将原来的BLP模型的星特性，在一定范围内，修改为等级临时上调，结合询问用户和智能化判断来减少冲突。
在调试中，这一策略极大地加强了系统的可用性。
(pass)
同时，利用主体访问历史可以智能化地生成规则。
无论是应用程序还是恶意软件，作为程序，其行为有很强的规律性。
我们利用主体访问历史，通过机器学习等相应的人工智能算法，对于用户的判断进行归纳，就可以智能地生成访问控制规则，从而完善原有的规则。
而且还可以结合历史在必要时向用户提供推荐的处理建议，从而有效地增强系统的有效性、实用性和友好性。
(pass)
对于访问控制的客体对象，主要是文件。由于Windows的特性，我们提高细粒度到注册表和其他系统配置文件等其他系统关键信息。
(pass)
以下就是我们的后台客户端界面。完善的C/S架构，使得管理员，可以方便地通过网络配置客户计算机的策略上。

PS:我觉得太长了。。。
望修改
